{
  "hash": "78a644b3674cc7c4c3b08fa169a4e8c3",
  "result": {
    "markdown": "# Formatos de R Markdown\n\n## Introducción\n\nHasta ahora has visto R Markdown usado para producir documentos HTML. Este capítulo muestra una breve descripción de algunos de los muchos otros tipos de documentos que puedes generar con R Markdown. Hay dos maneras de definir el output de un documento:\n\n1.  De forma permanente, modificando el encabezado YAML: \n    \n    ```yaml\n    title: \"Demo Viridis\"\n    output: html_document\n    ```\n    \n2.  De forma transitoria, llamando `rmarkdown::render()` directamente:\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    rmarkdown::render(\"diamond-sizes.Rmd\", output_format = \"word_document\")\n    ```\n    :::\n\n    \n    Esto es útil si quieres producir múltiples tipos de outputs programáticamente.\n\nEl botón knit de RStudio genera un archivo con el primer tipo de formato listado en el campo`output`. Puedes generar archivos en formatos adicionales haciendo clic en el menú de selección al lado del botón knit.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rmarkdown-knit.png){width=206}\n:::\n:::\n\n\n## Opciones de salida\n\nCada formato de salida está asociado con una función de R. Puedes escribir `foo` o `pkg::foo`. Si omites `pkg`, por defecto se asume que es rmarkdown. Es importante conocer el nombre de la función que genera el documento de salida, porque así es como obtienes ayuda. Por ejemplo, para saber qué parámetros puedes definir con `html_document`, busca en `?rmarkdown::html_document`.\n\nPara sobrescribir los parámetros predeterminados necesitas usar un campo de `output` extendido. Por ejemplo, si quisieras generar un `html_document` con una tabla de contenido flotante, deberías usar:\n\n```yaml\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n```\n\nIncluso puedes generar múltiples salidas suministrando una lista de formatos:\n\n```yaml\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n  pdf_document: default\n```\n\nNota la sintaxis especial si no quieres modificar ninguna de las opciones por defecto: debes agregar `default`.\n\n## Documentos\n\nEl capítulo anterior se enfocó en en la salida por defecto, que es `html_document`. Sin embargo, hay un número de variaciones básicas para generar diferentes tipos de documentos:\n\n*   `pdf_document` crea un PDF con LaTeX (un sistema de código abierto \n    de composición de textos), que necesitarás instalar. RStudio te notificará\n    si no lo tienes.\n  \n*   `word_document` para documentos de Microsoft Word (`.docx`).\n  \n*   `odt_document` para documentos de texto OpenDocument (`.odt`).\n  \n*   `rtf_document` para documentos de Formato de Texto Enriquecido (`.rtf`).\n  \n*   `md_document` para documentos Markdown. Típicamente no es muy útil en sí mismo, \n    pero puedes usarlo si, por ejemplo, tu CMS corporativo o \n    tu wiki de laboratorio usa markdown.\n       \n*   `github_document`: esta es una versión de `md_document` específicamente\n    diseñada para compartir en GitHub.\n\nRecuerda que cuando generes un documento para compartirlo con responsables de la toma de decisiones, puedes desactivar la visualización predeterminada de código, definiendo las opciones globales en el fragmento de configuración (setup):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = FALSE)\n```\n:::\n\n\nOtra opción para los `html_document`es hacer que los fragmentos de código estén escondidos por defecto, pero visibles con un clic: \n\n```yaml\noutput:\n  html_document:\n    code_folding: hide\n```\n\n## Notebooks\n\nUn notebook `html_notebook` es una variación de un `html_document`. Los outputs de los dos documentos son muy similares, pero tienen propósitos distintos. Un `html_document` está enfocado en la comunicación con personas encargadas de la toma de decisiones, mientras que un notebook está enfocado en colaborar con otros/as científicos/as de datos. Estos propósitos diferentes llevan a que la salida HTML sea usada de diferentes maneras. Ambas contendrán todo el output renderizado, pero el notebook también contendrá el código fuente completo. Esto significa que puedes usar el archivo `.nb.html` generado por el notebook de dos maneras:\n\n1. Puedes verlo en un navegador web y ver el output generado. A diferencia del\n   `html_document`, esta renderización siempre incluye una copia incrustada del\n   código fuente que lo generó.   \n\n2. Puedes editarlo en RStudio. Cuando abras un archivo `.nb.html`, RStudio \n   automáticamente recreará el archivo `.Rmd` que lo creó. En el futuro, también\n   podrás incluir archivos de soporte (por ej., archivos de datos `.csv`), que \n   serán extraídos automáticamente cuando sea necesario.\n\nEnviar archivos `.nb.html` por correo electrónico es una manera simple de compartir los análisis con tus colegas. Pero las cosas se pondrán difíciles tan pronto como quieras hacer cambios. Si esto empieza a suceder, es un buen momento para aprender Git y GitHub. Aprender Git y Github definitivamente es doloroso al principio, pero la recompensa de la colaboración es enorme. Como se mencionó anteriormente, Git y GitHub están fuera del alcance de este libro, pero este es un consejo útil si ya los estás usando: usa las dos salidas, `html_notebook` y `github_document`: \n\n```yaml\noutput:\n  html_notebook: default\n  github_document: default\n```\n\n`html_notebook` te da una vista previa local y un archivo que puedes compartir por correo electrónico. `github_document` crea un archivo md mínimo que puedes ingresar en Git. Puedes revisar fácilmente cómo los resultados de tus análisis (no solo el código) cambian con el tiempo y GitHub lo renderizará muy bien en línea.\n\n## Presentaciones\n\nTambién puedes usar R Markdown para crear presentaciones. Obtienes menos control visual que con herramientas como Keynote y PowerPoint, pero ahorrarás mucho tiempo insertando automáticamente los resultados de tu código R en una presentación. Las presentaciones funcionan dividiendo tu contenido en diapositivas, con una nueva diapositiva que comienza en cada encabezado de primer nivel (`#`) o de segundo nivel (`##`). También puedes insertar una regla horizontal (`***`) para crear una nueva diapositiva sin encabezado. \n\nR Markdown viene con tres formatos de presentación integrados:\n\n1.  `ioslides_presentation` - Presentación HTML con ioslides.\n\n2.  `slidy_presentation` - Presentación HTML con W3C Slidy.\n\n3.  `beamer_presentation` - Presentación PDF con LaTeX Beamer.\n\nOtros dos formatos populares son proporcionados por paquetes:\n\n1.  `revealjs::revealjs_presentation` - Presentación HTML con reveal.js. \n    Requiere el paquete __revealjs__.\n\n2.  __rmdshower__, <https://github.com/MangoTheCat/rmdshower>, proporciona un \n    wrapper para el motor de presentaciones __shower__, <https://github.com/shower/shower> .\n\n## Dashboards\n\nLos dashboards o tableros de control son una forma útil de comunicar grandes cantidades de información de forma visual y rápida. Flexdashboard hace que sea particularmente fácil crear dashboards usando R Markdown y proporciona una convención de cómo los encabezados afectan el diseño:\n\n* Cada encabezado de Nivel 1 (`#`) comienza una nueva página en el dashboard.\n* Cada encabezado de Nivel 2 (`##`) comienza una nueva columna.\n* Cada encabezado de Nivel 3 (`###`) comienza una nueva fila.\n\nPor ejemplo, puedes producir este dashboard:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rmarkdown-flexdashboard.png){width=75%}\n:::\n:::\n\n\nUsando este código:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n````\n---\ntitle: \"Dashboard de distribución de diamantes\"\noutput: flexdashboard::flex_dashboard\n---\n\n```{r setup, include = FALSE}\nlibrary(datos)\nlibrary(ggplot2)\nlibrary(dplyr)\nknitr::opts_chunk$set(fig.width = 5, fig.asp = 1 / 3)\n```\n\n## Columna 1\n\n### Quilate\n\n```{r}\nggplot(diamantes, aes(quilate)) + geom_histogram(binwidth = 0.1)\n```\n\n### Corte\n\n```{r}\nggplot(diamantes, aes(corte)) + geom_bar()\n```\n\n### Color\n\n```{r}\nggplot(diamantes, aes(color)) + geom_bar()\n```\n\n## Columna 2\n\n### Diamantes más grandes\n\n```{r}\ndiamantes %>%\n  arrange(desc(quilate)) %>%\n  head(100) %>%\n  select(quilate, corte, color, precio) %>%\n  DT::datatable()\n```\n````\n:::\n:::\n\n\nFlexdashboard también proporciona herramientas simples para crear barras laterales, tabuladores, cuadros de valores y medidores. Para obtener más información (en inglés) acerca de Flexdashboard visita <http://rmarkdown.rstudio.com/flexdashboard/>.\n\n## Interactividad\n\nCualquier formato HTML (documento, notebook, presentación o dashboard) puede contener componentes interactivos.\n\n### htmlwidgets\n\nHTML es un formato interactivo y puedes aprovechar esa interactividad con __htmlwidgets__, que son funciones de R que producen visualizaciones HTML interactivas. Por ejemplo, fíjate en el mapa de __leaflet__ a continuación. Si estás viendo esta página en la web, puedes arrastrar el mapa, acercar y alejar, etc. Obviamente no puedes hacer esto en un libro, por lo que RMarkdown automáticamente inserta una captura de pantalla estática.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\nleaflet() %>%\n  setView(174.764, -36.877, zoom = 16) %>% \n  addTiles() %>%\n  addMarkers(174.764, -36.877, popup = \"Maungawhau\") \n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-33745d526b205beed193\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-33745d526b205beed193\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"setView\":[[-36.877,174.764],16,[]],\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-36.877,174.764,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Maungawhau\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-36.877,-36.877],\"lng\":[174.764,174.764]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nLo bueno de htmlwidgets es que no necesitas saber nada sobre HTML o JavaScript para usarlos. Todos los detalles están incluidos en el paquete, por lo que no tienes que preocuparte por eso.\n\nHay muchos paquetes que proporcionan htmlwidgets, incluyendo:\n\n* __dygraphs__, <http://rstudio.github.io/dygraphs/>, para visualizaciones\ninteractivas de series de tiempo.\n\n* __DT__, <http://rstudio.github.io/DT/>, para tablas interactivas.\n\n* __threejs__, <https://github.com/bwlewis/rthreejs>, para plots 3D interactivos.\n\n* __DiagrammeR__, <http://rich-iannone.github.io/DiagrammeR/>, para diagramas\n  (como diagramas de flujo y diagramas simples de nodos).\n\nPara obtener más información sobre los htmlwidgets y ver una lista más completa de los paquetes que los proporcionan, visita <http://www.htmlwidgets.org/>.\n\n### Shiny\n\nLos htmlwidgets proporcionan interactividad del lado del cliente, es decir que toda la interactividad ocurre en el navegador, independientemente de R. Por un lado, esto es bueno porque puedes distribuir el archivo HTML sin ninguna conexión con R. Sin embargo, también limita fundamentalmente lo que puedes hacer a las cosas que han sido implementadas en HTML y JavaScript. Una alternativa es usar __shiny__, un paquete que te permite crear interactividad usando código R, no JavaScript.\n\nPara llamar código Shiny desde un documento R Markdown, agrega `runtime: shiny` al encabezado:\n\n```yaml\ntitle: \"Applicación Web Shiny\"\noutput: html_document\nruntime: shiny\n```\n\nLuego puedes usar las funciones de \"input\" para agregar componentes interactivos al documento:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\ntextInput(\"nombre\", \"Cuál es tu nombre?\")\nnumericInput(\"edad\", \"Cuántos años tienes?\", NA, min = 0, max = 150)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](screenshots/rmarkdown-shiny.png){width=357}\n:::\n:::\n\n\nDespués puedes referirte a los valores con `input$nombre` e `input$edad` y el código que los usa se volverá a ejecutar automáticamente cada vez que los valores cambien.\n\nNo podemos mostrarte una aplicación Shiny corriendo ahora porque las interacciones de Shiny ocurren en el lado del servidor. Esto quiere decir que puedes escribir aplicaciones interactivas sin saber JavaScript, pero necesitas un servidor para correrlas. Esto introduce un problema logístico: Las aplicaciones Shiny necesitan un servidor para correr en línea. Cuando corres una aplicación Shiny en tu propia computadora, Shiny automáticamente crea un servidor Shiny para que la puedas correr, pero necesitarás un servidor Shiny público si quieres proporcionar este tipo de interactividad en línea. Ésta es la limitación fundamental de Shiny: puedes crear en Shiny todo lo que puedes crear en R, pero necesitarás que R esté corriendo en algún lugar.\n\nAprende más sobre Shiny en: <http://shiny.rstudio.com/>.\n\n## Sitios Web\n\nCon un poco más de infraestructura puedes usar R Markdown para crear un sitio web completo:\n\n*   Coloca todos tus archivos `.Rmd` en un mismo directorio. `index.Rmd` será tu \n    página de inicio.\n\n*   Agrega un archivo YAML llamado `_site.yml` que proporcionará la navegación para el sitio.\n    Por ejemplo:\n\n\n    ::: {.cell}\n    ::: {.cell-output .cell-output-stdout}\n    ```\n    name: \"mi-sitio\"\n    navbar:\n      title: \"Mi Sitio\"\n      left:\n        - text: \"Inicio\"\n          href: index.html\n        - text: \"Colores Viridis\"\n          href: 1-example.html\n        - text: \"Colores Terrain\"\n          href: 3-inline.html\n    ```\n    :::\n    :::\n\n\nEjecuta `rmarkdown::render_site()` para crear `_site`, un directorio de archivos listo para ser implementado como un sitio web estático independiente, o si usas un proyecto de RStudio para el directorio de tu sitio web, RStudio agregará una pestaña de compilación que puedes usar para crear y obtener una vista previa de tu sitio.\n\nLee más acerca de sitios web en: <http://rmarkdown.rstudio.com/rmarkdown_websites.html>.\n\n## Otros Formatos\n\nOtros paquetes proveen incluso más formatos de salida:\n\n*   El paquete __bookdown__, <https://github.com/rstudio/bookdown>, \n    hace que crear libros, como este mismo, sea fácil. Para aprender más, lee\n    [_Authoring Books with R Markdown_](https://bookdown.org/yihui/bookdown/),\n    de Yihui Xie, el que, por supuesto, escrito en bookdown. Visita\n    <http://www.bookdown.org> para ver otros libros bookdown escritos \n    por la comunidad de R.\n\n*   El paquete __prettydoc__, <https://github.com/yixuan/prettydoc/>, \n    proporciona formatos livianos de documentos con una gama de temas atractivos.\n\n*   El paquete __rticles__, <https://github.com/rstudio/rticles>, compila una\n    selección de formatos específicos para revistas científicas.\n\nConsulta <http://rmarkdown.rstudio.com/formats.html> para ver una lista de más formatos. También puedes crear tu propio formato siguiendo las instrucciones en inglés de: <http://rmarkdown.rstudio.com/developer_custom_formats.html>.\n\n## Aprende más\n\nPara obtener más información sobre comunicación efectiva con estos diferentes formatos, recomiendo los siguientes recursos (en inglés):\n\n* Para mejorar tus habilidades de presentación, recomiendo: [_Presentation Patterns_](https://amzn.com/0321820800), de Neal Ford,\n  Matthew McCollough y Nathaniel Schutta. Proporciona un conjunto de patrones \n  efectivos (de alto y bajo nivel) que puedes usar para mejorar tus presentaciones.\n\n* Si das charlas académicas, recomiendo que leas la guía para dar charlas del grupo Leek:\n  [_Leek group guide to giving talks_](https://github.com/jtleek/talkguide).\n  \n* Nosotros no lo hemos tomado, pero hemos escuchado buenos comentarios sobre \n  el curso en línea Public Speaking de Matt McGarrity: \n  <https://www.coursera.org/learn/public-speaking>.\n\n* Si estás creando muchos dashboards, asegúrate de leer: \n    [Information Dashboard Design: The Effective Visual Communication of Data](https://amzn.com/0596100167). Te ayudará a crear dashboards realmente útiles\n  y no solo bonitos a la vista.\n\n* Comunicar tus ideas efectivamente a menudo se beneficia de un poco \n  de conocimiento en diseño gráfico. El libro de diseño para no diseñadores,\n  [_The Non-Designer's Design Book_](http://amzn.com/0133966151), \n  es un buen lugar para empezar.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<link href=\"site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-binding-2.1.2/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}