{
  "hash": "f6b4fb94b286c6b97398693ba0346e9e",
  "result": {
    "markdown": "# Tibbles\n\n## Introducción\n\n\nA lo largo de este libro trabajaremos con \"tibbles\" (que se pronuncia /tibls/) en lugar de los tradicionales `data.frame` de R. Los tibbles __son__ _data frames_, pero modifican algunas características antiguas para hacernos la vida más fácil. R es un lenguaje viejo y algunas cosas que eran útiles hace 10 o 20 años actualmente pueden resultar inconvenientes. Es difícil modificar R base sin romper código existente, así que la mayor parte de la innovación ocurre a través de paquetes. Aquí describiremos el paquete __tibble__, que provee una versión de _data frame_ que facilita el trabajo con el tidyverse. La mayoría de las veces usaremos el término _tibble_ y _data frame_ de manera indistinta; cuando queramos referirnos de manera particular al _data frame_ que viene incluido en R lo llamaremos `data.frame`.\n\nSi luego de leer este capítulo te quedas con ganas de aprender más sobre tibbles, quizás disfrutes `vignette(\"tibble\")`.\n\n### Prerequisitos\n\nEn este capítulo exploraremos el paquete __tibble__, parte de los paquetes principales del tidyverse. Para ejemplificar utilizaremos _datasets_ incluidos en el paquete __datos__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(datos)\n```\n:::\n\n\n## Creando tibbles\n\nLa mayoría de las funciones que usarás en este libro producen tibbles, ya que son una de las características trasversales del tidyverse. La mayoría de los paquetes de R suelen usar data frames clásicos, así que algo que podrías querer hacer es convertir un data frame en un tibble. Esto lo puedes hacer con `as_tibble()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(flores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 × 5\n   Largo.Sepalo Ancho.Sepalo Largo.Petalo Ancho.Petalo Especie\n          <dbl>        <dbl>        <dbl>        <dbl> <fct>  \n 1          5.1          3.5          1.4          0.2 setosa \n 2          4.9          3            1.4          0.2 setosa \n 3          4.7          3.2          1.3          0.2 setosa \n 4          4.6          3.1          1.5          0.2 setosa \n 5          5            3.6          1.4          0.2 setosa \n 6          5.4          3.9          1.7          0.4 setosa \n 7          4.6          3.4          1.4          0.3 setosa \n 8          5            3.4          1.5          0.2 setosa \n 9          4.4          2.9          1.4          0.2 setosa \n10          4.9          3.1          1.5          0.1 setosa \n# ℹ 140 more rows\n```\n:::\n:::\n\n\nPuedes crear un nuevo tibble a partir de vectores individuales con `tibble()`. Esta función recicla vectores de longitud 1 automáticamente y te permite usar variables creadas dentro de la propia función, como se muestra abajo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  x = 1:5,\n  y = 1,\n  z = x^2 + y\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      x     y     z\n  <int> <dbl> <dbl>\n1     1     1     2\n2     2     1     5\n3     3     1    10\n4     4     1    17\n5     5     1    26\n```\n:::\n:::\n\n\nSi ya te has familiarizado con `data.frame()`, es importante que tomes en cuenta que `tibble()` hace menos cosas: nunca cambia el tipo de los inputs (p. ej., ¡nunca convierte caracteres en factores!), nunca cambia el nombre de las variables y nunca asigna nombres a las filas.\n\nUn tibble puede usar nombres de columnas que no son nombres de variables válidos en R (también conocidos como nombres __no sintácticos__). Por ejemplo, pueden empezar con un caracter diferente a una letra o contener caracteres poco comunes, como espacios. Para referirse a estas variables, tienes que rodearlos de acentos graves, `` ` ``:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb <- tibble(\n  `:)` = \"sonrisa\",\n  ` ` = \"espacio\",\n  `2000` = \"número\"\n)\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  `:)`    ` `     `2000`\n  <chr>   <chr>   <chr> \n1 sonrisa espacio número\n```\n:::\n:::\n\n\nTambién necesitarás los acentos graves al trabajar con estas variables en otros paquetes, como ggplot2, dplyr y tidyr.\n\nOtra forma de crear un tibble es con `tribble()`, que es una abreviación de tibble **tr**anspuesto. Esta función está pensada para realizar la entrada de datos en el código: los nombres de las columnas se definen con fórmulas (esto es, comienzan con `~`) y cada entrada está separada por comas. Esto permite escribir pocos datos de manera legible.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n  ~x, ~y, ~z,\n  #--|--|----\n  \"a\", 2, 3.6,\n  \"b\", 1, 8.5\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  x         y     z\n  <chr> <dbl> <dbl>\n1 a         2   3.6\n2 b         1   8.5\n```\n:::\n:::\n\n\nUsualmente agregamos un comentario para dejar en claro cuál es el encabezado (esta línea debe empezar con `#`).\n\n## Tibbles vs. data.frame\n\nExisten dos diferencias principales entre el uso de un tibble y un `data.frame` clásico: la impresión en la consola y la selección de los subconjuntos.\n\n### Impresión en la consola\n\nLos tibbles tienen un método de impresión en la consola refinado: solo muestran las primeras 10 filas y solo aquellas columnas que entran en el ancho de la pantalla. Esto simplifica y facilita trabajar con bases de datos grandes. Además del nombre, cada columna muestra su tipo. Esto último es una gran característica tomada de `str()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  a = lubridate::now() + runif(1e3) * 86400,\n  b = lubridate::today() + runif(1e3) * 30,\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 × 5\n   a                   b              c     d e    \n   <dttm>              <date>     <int> <dbl> <chr>\n 1 2023-06-07 13:41:54 2023-06-27     1 0.827 h    \n 2 2023-06-07 13:18:35 2023-06-06     2 0.511 e    \n 3 2023-06-07 11:55:34 2023-06-24     3 0.302 b    \n 4 2023-06-07 14:05:47 2023-06-15     4 0.471 w    \n 5 2023-06-07 03:13:10 2023-07-04     5 0.514 l    \n 6 2023-06-07 13:30:50 2023-06-17     6 0.905 m    \n 7 2023-06-07 14:48:04 2023-07-04     7 0.747 h    \n 8 2023-06-07 12:33:23 2023-07-01     8 0.350 j    \n 9 2023-06-06 16:23:03 2023-06-20     9 0.254 r    \n10 2023-06-06 23:01:59 2023-06-10    10 0.439 f    \n# ℹ 990 more rows\n```\n:::\n:::\n\n\nLos tibbles están diseñados para no inundar tu consola accidentalmente al mirar data frames muy grandes. Sin embargo, a veces es necesario un output mayor que el que se obtiene por defecto. Existen algunas opciones que pueden ayudar.\n\nPrimero, puedes usar `print()` en el data frame y controlar el número de filas (`n`) y el ancho (`width`) mostrado. Por otro lado, `width = Inf` muestra todas las columnas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos::vuelos %>%\n  print(n = 10, width = Inf)\n```\n:::\n\n\nTambién puedes controlar las características de impresión, modificando las opciones que están determinadas por default.\n\n* `options(tibble.print_max = n, tibble.print_min = m)`: si hay más de `n` filas, mostrar solo `m` filas. \n\n* Usa `options(tibble.print_min = Inf)` para mostrar siempre todas las filas.\n\n* Usa `options(tibble.width = Inf)` para mostrar siempre todas las columnas sin importar el ancho de la pantalla.\n\nPuedes ver una lista completa de opciones en la ayuda del paquete con `package?tibble`.\n\nLa opción final es usar el visualizador de datos de RStudio para obtener una versión interactiva del set de datos completo. Esto también es útil luego de realizar una larga cadena de manipulaciones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos::vuelos %>%\n  View()\n```\n:::\n\n\n### Selección de subconjuntos\n\nHasta ahora, todas las herramientas que aprendiste funcionan con el data frame completo. Si quieres recuperar una variable individual, necesitas algunas herramientas nuevas: `$` y `[[`. Mientras que `[[` permite extraer variables usando tanto su nombre como su posición, con `$` sólo se puede extraer mediante el nombre. La única diferencia es que `$` implica escribir un poco menos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  x = runif(5),\n  y = rnorm(5)\n)\n\n# Extraer usando el nombre\ndf$x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06231084 0.84288855 0.56564032 0.49338861 0.14049903\n```\n:::\n\n```{.r .cell-code}\ndf[[\"x\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06231084 0.84288855 0.56564032 0.49338861 0.14049903\n```\n:::\n\n```{.r .cell-code}\n# Extraer indicando la posición\ndf[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06231084 0.84288855 0.56564032 0.49338861 0.14049903\n```\n:::\n:::\n\n\nPara usar estas herramientas dentro de un pipe, necesitarás usar el marcador de posición `.`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% .$x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06231084 0.84288855 0.56564032 0.49338861 0.14049903\n```\n:::\n\n```{.r .cell-code}\ndf %>% .[[\"x\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.06231084 0.84288855 0.56564032 0.49338861 0.14049903\n```\n:::\n:::\n\n\nEn comparación a un `data.frame`, los tibbles son más estrictos: nunca funcionan con coincidencias parciales y generan una advertencia si la columna a la que intentas de acceder no existe.\n\n## Interactuando con código antiguo\n\nAlgunas funciones más antiguas no funcionan con los tibbles. Si te encuentras en uno de esos casos, usa `as.data.frame()` para convertir un tibble de nuevo en un `data.frame`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(as.data.frame(tb))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\nLa principal razón de que algunas funciones previas no funcionen con tibbles es la función `[`. En este libro no usamos mucho `[` porque `dplyr::filter()` y `dplyr::select()` resuelven los mismos problemas con un código más claro (aprenderás un poco sobre ello en el capítulo sobre [subjoncuntos de vectores](#vector-subsetting, subdivisión de vectores)). Con los data frames de R base, `[` a veces devuelve un data frame y a veces devuelve un vector. Con tibbles, `[` siempre devuelve otro tibble.\n\n## Ejercicios\n\n\n1. ¿Cómo puedes saber si un objeto es un tibble? (Sugerencia: imprime `mtautos` en consola, que es un data frame clásico).\n\n2. Compara y contrasta las siguientes operaciones aplicadas a un `data.frame` y a un tibble equivalente. ¿Qué es diferente? ¿Por qué podría causarte problemas el comportamiento por defecto del data frame?\n\n\n ::: {.cell}\n \n ```{.r .cell-code}\n df <- data.frame(abc = 1, xyz = \"a\")\n df$x\n df[, \"xyz\"]\n df[, c(\"abc\", \"xyz\")]\n ```\n :::\n\n\n3. Si tienes el nombre de una variable guardada en un objeto, p.e., `var <- \"mpg\"`, ¿cómo puedes extraer esta variable de un tibble?\n\n4. Practica referenciar nombres no sintácticos en el siguiente data frame:\n\n    1. Extrayendo la variable llamada `1`.\n\n    1. Generando un gráfico de dispersión de `1` vs `2`.\n\n    1. Creando una nueva columna llamada `3` que sea el resultado de la división de `2` por `1`.\n\n    1. Renombrando las columnas como `uno`, `dos` y `tres`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmolesto <- tibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n)\n```\n:::\n\n\n5. ¿Qué hace `tibble::enframe()`? ¿Cuándo lo usarías?\n\n6. ¿Qué opción controla cuántos nombres de columnas adicionales se muestran al pie de un tibble?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}